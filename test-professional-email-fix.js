/**
 * Teste espec√≠fico para confirma√ß√£o de email de profissionais
 * Execute este script no terminal do projeto
 */

import { createClient } from "@supabase/supabase-js";

// Configura√ß√£o do Supabase (substitua pelas suas credenciais)
const supabaseUrl = process.env.SUPABASE_URL || "YOUR_SUPABASE_URL";
const supabaseAnonKey =
  process.env.SUPABASE_ANON_KEY || "YOUR_SUPABASE_ANON_KEY";
const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testProfessionalEmailConfirmation() {
  console.log("üß™ TESTE: Confirma√ß√£o de Email para Profissionais\n");

  const testEmail = `profissional-teste-${Date.now()}@teste.com`;
  const testPassword = "TesteSeguro123!";

  try {
    console.log("üìù Passo 1: Registrando profissional...");
    console.log("  Email:", testEmail);

    // Simular registro via OTP (como a aplica√ß√£o faz)
    const { data: signUpData, error: signUpError } =
      await supabase.auth.signInWithOtp({
        email: testEmail,
        options: {
          shouldCreateUser: true,
          data: {
            name: "Profissional Teste",
            role: "professional",
            password: testPassword,
          },
        },
      });

    if (signUpError) {
      console.error("‚ùå Erro no registro:", signUpError.message);
      return;
    }

    console.log("‚úÖ Email de confirma√ß√£o enviado");
    console.log("üìß Verifique o Mailtrap para o c√≥digo OTP");

    console.log("\nüìù Passo 2: Para testar o link de confirma√ß√£o:");
    console.log("  1. Acesse o Mailtrap");
    console.log("  2. Encontre o email para:", testEmail);
    console.log("  3. Clique no link de confirma√ß√£o");
    console.log("  4. Execute: testUserAfterConfirmation()");

    // Disponibilizar fun√ß√£o para testar ap√≥s confirma√ß√£o
    global.testUserAfterConfirmation = async () => {
      console.log("\nüîç Verificando usu√°rio ap√≥s confirma√ß√£o...");

      // Verificar se existe usu√°rio autenticado
      const {
        data: { user },
        error: userError,
      } = await supabase.auth.getUser();

      if (userError || !user) {
        console.log("‚ùå Usu√°rio n√£o autenticado. Tentando login...");

        const { data: loginData, error: loginError } =
          await supabase.auth.signInWithPassword({
            email: testEmail,
            password: testPassword,
          });

        if (loginError) {
          console.error("‚ùå Erro no login:", loginError.message);
          return;
        }

        console.log("‚úÖ Login bem-sucedido");
      }

      // Verificar dados na tabela users
      const { data: userData, error: profileError } = await supabase
        .from("users")
        .select("*")
        .eq("email", testEmail)
        .single();

      if (profileError) {
        console.error("‚ùå Erro ao buscar perfil:", profileError.message);
        console.log(
          "üí° Isso pode indicar que o perfil n√£o foi criado corretamente"
        );
        return;
      }

      console.log("\nüìä RESULTADO DO TESTE:");
      console.log("  - Nome:", userData.name);
      console.log("  - Email:", userData.email);
      console.log("  - Role:", userData.role);
      console.log("  - Status:", userData.status);
      console.log("  - Email verificado:", userData.email_verified);

      if (userData.email_verified) {
        console.log("\n‚úÖ TESTE PASSOU!");
        console.log("   Campo email_verified foi atualizado corretamente");
      } else {
        console.log("\n‚ùå TESTE FALHOU!");
        console.log("   Campo email_verified ainda √© false");
        console.log("   A corre√ß√£o pode n√£o estar funcionando");
      }

      // Limpar usu√°rio de teste
      console.log("\nüßπ Limpando dados de teste...");
      await supabase.auth.signOut();

      // Opcionalmente, remover da tabela users (descomente se necess√°rio)
      // await supabase.from('users').delete().eq('email', testEmail);
    };

    console.log("\nüí° PR√ìXIMOS PASSOS:");
    console.log("  1. Confirme o email via link no Mailtrap");
    console.log("  2. Execute: testUserAfterConfirmation()");
  } catch (error) {
    console.error("‚ùå Erro inesperado:", error);
  }
}

// Fun√ß√£o para testar usu√°rio existente
async function testExistingUser(email) {
  console.log("üîç Testando usu√°rio existente:", email);

  try {
    // Verificar dados na tabela users
    const { data: userData, error: profileError } = await supabase
      .from("users")
      .select("*")
      .eq("email", email)
      .single();

    if (profileError) {
      console.error("‚ùå Usu√°rio n√£o encontrado:", profileError.message);
      return;
    }

    console.log("\nüìä DADOS ATUAIS:");
    console.log("  - Nome:", userData.name);
    console.log("  - Email:", userData.email);
    console.log("  - Role:", userData.role);
    console.log("  - Status:", userData.status);
    console.log("  - Email verificado:", userData.email_verified);

    // Verificar se usu√°rio est√° autenticado no Supabase
    const {
      data: { user },
      error: userError,
    } = await supabase.auth.getUser();

    if (user && user.email === email) {
      console.log("\nüìß DADOS DO SUPABASE AUTH:");
      console.log("  - Email confirmado:", !!user.email_confirmed_at);
      console.log("  - Data confirma√ß√£o:", user.email_confirmed_at);

      if (user.email_confirmed_at && !userData.email_verified) {
        console.log("\nüîß CORRIGINDO campo email_verified...");

        const { error: updateError } = await supabase
          .from("users")
          .update({ email_verified: true })
          .eq("email", email);

        if (updateError) {
          console.error("‚ùå Erro ao atualizar:", updateError.message);
        } else {
          console.log("‚úÖ Campo email_verified atualizado para true");
        }
      }
    } else {
      console.log("‚ùå Usu√°rio n√£o est√° autenticado no Supabase Auth");
    }
  } catch (error) {
    console.error("‚ùå Erro:", error);
  }
}

// Disponibilizar fun√ß√µes globalmente
global.testProfessionalEmailConfirmation = testProfessionalEmailConfirmation;
global.testExistingUser = testExistingUser;

console.log("üîß FUN√á√ïES DE TESTE DISPON√çVEIS:");
console.log(
  "  - testProfessionalEmailConfirmation() - Testar com novo usu√°rio"
);
console.log(
  "  - testExistingUser('email@exemplo.com') - Testar usu√°rio existente"
);
console.log("  - testUserAfterConfirmation() - Executar ap√≥s confirmar email");

// Executar teste principal
testProfessionalEmailConfirmation();
