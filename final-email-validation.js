/**
 * Valida√ß√£o final do sistema de email de confirma√ß√£o
 */

import { createClient } from "@supabase/supabase-js";

const supabaseUrl = "https://uqrvenlkquheajuveggv.supabase.co";
const supabaseKey =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVxcnZlbmxrcXVoZWFqdXZlZ2d2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcwNzg4NDgsImV4cCI6MjA3MjY1NDg0OH0.ZdgBkvjC5irHh7E9fagqX_Pu797anPfE8jO91iNDRIc";

const supabase = createClient(supabaseUrl, supabaseKey);

async function validateEmailConfirmation() {
  console.log("üîç VALIDA√á√ÉO FINAL - Email de Confirma√ß√£o\n");

  // Aguardar para evitar rate limit
  console.log("‚è≥ Aguardando 30 segundos para evitar rate limit...");
  await new Promise((resolve) => setTimeout(resolve, 30000));

  const testUser = {
    name: "Valida√ß√£o Final",
    email: `validation-${Date.now()}@homeservice.test`,
    password: "ValidacaoSegura123!",
  };

  console.log("üß™ Iniciando valida√ß√£o com:");
  console.log("  Email:", testUser.email);

  try {
    // Teste 1: SignUp tradicional
    console.log("\nüìù Teste 1: SignUp tradicional (m√©todo atual da app)");

    const { data, error } = await supabase.auth.signUp({
      email: testUser.email,
      password: testUser.password,
      options: {
        data: { name: testUser.name },
      },
    });

    if (error) {
      if (error.message.includes("rate limit")) {
        console.log("‚ö†Ô∏è Rate limit ainda ativo, aguardando mais...");
        await new Promise((resolve) => setTimeout(resolve, 60000));
        return validateEmailConfirmation(); // Tentar novamente
      }
      console.error("‚ùå Erro:", error.message);
      return;
    }

    console.log("üìä Resultado do SignUp:");
    console.log("  Usu√°rio criado:", !!data.user);
    console.log("  ID do usu√°rio:", data.user?.id);
    console.log("  Email confirmado:", !!data.user?.email_confirmed_at);
    console.log(
      "  Timestamp confirma√ß√£o:",
      data.user?.email_confirmed_at || "PENDENTE"
    );
    console.log("  Session ativa:", !!data.session);
    console.log("  Token de sess√£o:", data.session ? "SIM" : "N√ÉO");

    // An√°lise detalhada
    console.log("\nüìã AN√ÅLISE DETALHADA:");

    if (data.user?.email_confirmed_at && data.session) {
      console.log("‚ùå PROBLEMA CONFIRMADO:");
      console.log("   ‚û§ Usu√°rio automaticamente confirmado");
      console.log("   ‚û§ Session criada imediatamente");
      console.log("   ‚û§ Email de confirma√ß√£o N√ÉO foi enviado");
      console.log("   ‚û§ Configura√ß√£o: email confirmation DESABILITADO");

      console.log("\nüîß IMPACTO:");
      console.log("   ‚û§ Usu√°rios acessam sem confirmar email");
      console.log("   ‚û§ Emails inv√°lidos podem ser cadastrados");
      console.log("   ‚û§ Fluxo de verifica√ß√£o da app n√£o funciona");
    } else if (!data.user?.email_confirmed_at && !data.session) {
      console.log("‚úÖ CONFIGURA√á√ÉO CORRETA:");
      console.log("   ‚û§ Usu√°rio criado mas n√£o confirmado");
      console.log("   ‚û§ Nenhuma session ativa");
      console.log("   ‚û§ Email de confirma√ß√£o foi enviado");
      console.log("   ‚û§ Configura√ß√£o: email confirmation HABILITADO");
    } else {
      console.log("‚ö†Ô∏è CONFIGURA√á√ÉO PARCIAL:");
      console.log("   ‚û§ Estado intermedi√°rio detectado");
      console.log("   ‚û§ Verificar configura√ß√µes espec√≠ficas");
    }

    // Verificar se email foi realmente enviado
    console.log("\nüìß VERIFICA√á√ÉO DE ENVIO:");
    console.log("   1. Acesse: https://mailtrap.io");
    console.log("   2. Login na sua conta");
    console.log("   3. V√° para Email Sandbox");
    console.log("   4. Procure email para:", testUser.email);
    console.log("   5. Hor√°rio aproximado:", new Date().toLocaleString());

    // Limpar sess√£o
    await supabase.auth.signOut();

    // Teste espec√≠fico de reenvio
    console.log("\nüìù Teste 2: Verificando capacidade de reenvio");

    const { error: resendError } = await supabase.auth.resend({
      type: "signup",
      email: testUser.email,
    });

    if (resendError) {
      console.log("‚ùå Erro no reenvio:", resendError.message);
      if (resendError.message.includes("already confirmed")) {
        console.log("   ‚û§ Confirma auto-confirma√ß√£o");
      } else if (resendError.message.includes("rate limit")) {
        console.log("   ‚û§ Rate limit ativo");
      }
    } else {
      console.log("‚úÖ Reenvio bem-sucedido");
      console.log("   ‚û§ Email adicional enviado");
    }
  } catch (error) {
    console.error("‚ùå Erro inesperado:", error);
  }
}

async function checkCurrentSettings() {
  console.log("\n\nüîß VERIFICA√á√ÉO DE CONFIGURA√á√ïES ATUAIS\n");

  console.log("üìã Status detectado baseado nos testes:");
  console.log("   ‚û§ SMTP: ‚úÖ Funcionando (emails de OTP chegam)");
  console.log("   ‚û§ Rate Limit: ‚ö†Ô∏è Ativo (muitos testes executados)");
  console.log("   ‚û§ Email Confirmation: ‚ùå Desabilitado");
  console.log("   ‚û§ Auto-confirma√ß√£o: ‚úÖ Ativa");

  console.log("\nüéØ CONFIGURA√á√ïES NECESS√ÅRIAS:");
  console.log("   No painel do Supabase, procure por:");
  console.log("   1. Authentication > Sign In / Providers");
  console.log("   2. Authentication > Advanced");
  console.log("   3. Authentication > URL Configuration");
  console.log("   ");
  console.log("   Procure especificamente por:");
  console.log("   ‚òê 'Confirm email before sign in'");
  console.log("   ‚òê 'Email confirmation required'");
  console.log("   ‚òê 'Disable email confirmations'");
  console.log("   ‚òê 'Auto-confirm users'");

  console.log("\nüí° ALTERNATIVA T√âCNICA:");
  console.log("   Se a configura√ß√£o n√£o for encontrada,");
  console.log("   posso implementar solu√ß√£o via c√≥digo:");
  console.log("   ‚û§ Usar signInWithOtp() em vez de signUp()");
  console.log("   ‚û§ For√ßa envio de email sempre");
  console.log("   ‚û§ Implementa√ß√£o customizada de verifica√ß√£o");

  console.log("\n‚è∞ PR√ìXIMO TESTE:");
  console.log("   Aguarde 5 minutos e execute novamente");
  console.log("   ou verifique o Mailtrap agora mesmo");
}

async function runValidation() {
  await validateEmailConfirmation();
  await checkCurrentSettings();
}

runValidation();
