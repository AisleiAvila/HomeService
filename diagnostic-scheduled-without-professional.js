/**
 * Script de Diagn√≥stico: Detectar e Corrigir Solicita√ß√µes Agendadas sem Profissional
 *
 * Simula a situa√ß√£o atual onde h√° solicita√ß√µes com status "Agendado"
 * mas sem profissional atribu√≠do
 */

console.log("üîç Diagn√≥stico: Solicita√ß√µes Agendadas sem Profissional");
console.log("=".repeat(70));

// Simular dados atuais do sistema (baseado no que o usu√°rio mostrou)
const serviceRequests = [
  {
    id: 1,
    title: "Pintura da casa",
    client: "Cliente 01",
    professional_id: 101,
    professional_name: "Profissional 01",
    status: "Profissional selecionado",
    cost: 200.0,
    category: "Painting",
  },
  {
    id: 2,
    title: "Trocar encanamento danificado",
    client: "Cliente 01",
    professional_id: null, // üö® PROBLEMA: Status "Agendado" sem profissional!
    professional_name: "N√£o atribu√≠do",
    status: "Agendado",
    cost: 100.0,
    category: "Plumbing",
    scheduled_start_datetime: "2025-09-22T09:00:00Z",
  },
  {
    id: 3,
    title: "Cortar grama",
    client: "Cliente 01",
    professional_id: null,
    professional_name: "N√£o atribu√≠do",
    status: "Pending",
    cost: null,
    category: "Gardening",
  },
  {
    id: 4,
    title: "Trocar encanamento danificado",
    client: "Cliente 01",
    professional_id: 101,
    professional_name: "Profissional 01",
    status: "Assigned",
    cost: 100.0,
    category: "Plumbing",
  },
  {
    id: 5,
    title: "Aparar √°rvores",
    client: "Cliente 01",
    professional_id: 101,
    professional_name: "Profissional 01",
    status: "Assigned",
    cost: 10.0,
    category: "Gardening",
  },
];

const professionals = [
  {
    id: 101,
    name: "Profissional 01",
    role: "professional",
    specialties: ["Painting", "Plumbing", "Gardening"],
    active: true,
    current_workload: 3,
  },
  {
    id: 102,
    name: "Jo√£o Silva",
    role: "professional",
    specialties: ["Plumbing", "Electrical"],
    active: true,
    current_workload: 1,
  },
  {
    id: 103,
    name: "Maria Santos",
    role: "professional",
    specialties: ["Gardening", "Cleaning"],
    active: true,
    current_workload: 0,
  },
];

// Fun√ß√£o para detectar inconsist√™ncias
function detectInconsistencies() {
  console.log("\nüîç DETECTANDO INCONSIST√äNCIAS:");
  console.log("-".repeat(50));

  const inconsistentServices = serviceRequests.filter(
    (service) => service.status === "Agendado" && !service.professional_id
  );

  console.log(`üìä Total de servi√ßos: ${serviceRequests.length}`);
  console.log(
    `üö® Servi√ßos com status "Agendado" sem profissional: ${inconsistentServices.length}`
  );

  if (inconsistentServices.length > 0) {
    console.log("\n‚ùå INCONSIST√äNCIAS ENCONTRADAS:");
    inconsistentServices.forEach((service) => {
      console.log(`  - ID ${service.id}: "${service.title}"`);
      console.log(
        `    Status: ${service.status} | Profissional: ${service.professional_name}`
      );
      console.log(
        `    Categoria: ${service.category} | Custo: ‚Ç¨${service.cost}`
      );
      if (service.scheduled_start_datetime) {
        console.log(`    Data agendada: ${service.scheduled_start_datetime}`);
      }
      console.log("");
    });
    return inconsistentServices;
  } else {
    console.log("‚úÖ Nenhuma inconsist√™ncia encontrada!");
    return [];
  }
}

// Fun√ß√£o para auto-atribuir profissional
function autoAssignProfessional(serviceCategory) {
  console.log(`üîç Buscando profissional para categoria: ${serviceCategory}`);

  // Filtrar profissionais especializados na categoria
  const specialists = professionals.filter(
    (p) =>
      p.role === "professional" &&
      p.active &&
      p.specialties.includes(serviceCategory)
  );

  if (specialists.length > 0) {
    // Ordenar por menor carga de trabalho
    specialists.sort((a, b) => a.current_workload - b.current_workload);
    const selected = specialists[0];
    console.log(
      `‚úÖ Especialista selecionado: ${selected.name} (ID: ${selected.id}) - Carga: ${selected.current_workload}`
    );
    return selected;
  }

  // Fallback: qualquer profissional dispon√≠vel
  const availableProfessionals = professionals.filter(
    (p) => p.role === "professional" && p.active
  );

  if (availableProfessionals.length > 0) {
    availableProfessionals.sort(
      (a, b) => a.current_workload - b.current_workload
    );
    const selected = availableProfessionals[0];
    console.log(
      `‚ö†Ô∏è  Nenhum especialista. Selecionado: ${selected.name} (ID: ${selected.id}) - Carga: ${selected.current_workload}`
    );
    return selected;
  }

  console.log("‚ùå Nenhum profissional dispon√≠vel");
  return null;
}

// Fun√ß√£o para corrigir inconsist√™ncias
function fixInconsistencies(inconsistentServices) {
  if (inconsistentServices.length === 0) {
    console.log("‚ÑπÔ∏è  Nenhuma corre√ß√£o necess√°ria.");
    return;
  }

  console.log("\nüîß CORRIGINDO INCONSIST√äNCIAS:");
  console.log("-".repeat(50));

  let fixedCount = 0;

  inconsistentServices.forEach((service) => {
    console.log(
      `\n‚öôÔ∏è  Processando servi√ßo ID ${service.id}: "${service.title}"`
    );

    const assignedProfessional = autoAssignProfessional(service.category);

    if (assignedProfessional) {
      // Atualizar servi√ßo
      service.professional_id = assignedProfessional.id;
      service.professional_name = assignedProfessional.name;

      // Aumentar carga de trabalho do profissional
      assignedProfessional.current_workload++;

      console.log(
        `‚úÖ Profissional atribu√≠do: ${assignedProfessional.name} (ID: ${assignedProfessional.id})`
      );
      console.log(
        `üîî NOTIFICA√á√ÉO: ${assignedProfessional.name} foi atribu√≠do ao servi√ßo "${service.title}"`
      );

      fixedCount++;
    } else {
      // Mudar status se n√£o conseguir atribuir
      service.status = "Buscando profissional";
      console.log(
        `‚ö†Ô∏è  Status alterado para "Buscando profissional" (nenhum profissional dispon√≠vel)`
      );
    }
  });

  console.log(
    `\nüéØ Corre√ß√µes aplicadas: ${fixedCount} de ${inconsistentServices.length}`
  );
}

// Fun√ß√£o para mostrar relat√≥rio final
function generateFinalReport() {
  console.log("\nüìä RELAT√ìRIO FINAL:");
  console.log("=".repeat(70));

  const agendadoServices = serviceRequests.filter(
    (s) => s.status === "Agendado"
  );
  const agendadoWithProfessional = agendadoServices.filter(
    (s) => s.professional_id
  );
  const agendadoWithoutProfessional = agendadoServices.filter(
    (s) => !s.professional_id
  );

  console.log(
    `üìã Total de servi√ßos com status "Agendado": ${agendadoServices.length}`
  );
  console.log(
    `‚úÖ Com profissional atribu√≠do: ${agendadoWithProfessional.length}`
  );
  console.log(
    `‚ùå Sem profissional atribu√≠do: ${agendadoWithoutProfessional.length}`
  );

  if (agendadoWithoutProfessional.length === 0) {
    console.log(
      "\nüéâ SUCESSO: Todos os servi√ßos agendados t√™m profissional atribu√≠do!"
    );
  } else {
    console.log(
      `\n‚ö†Ô∏è  ATEN√á√ÉO: ${agendadoWithoutProfessional.length} servi√ßos ainda precisam de profissional`
    );
  }

  console.log("\nüìã ESTADO ATUAL DE TODOS OS SERVI√áOS:");
  console.table(
    serviceRequests.map((s) => ({
      ID: s.id,
      T√≠tulo: s.title.substring(0, 25) + (s.title.length > 25 ? "..." : ""),
      Cliente: s.client,
      Profissional: s.professional_name,
      Status: s.status,
      Custo: s.cost ? `‚Ç¨${s.cost}` : "N/A",
    }))
  );

  console.log("\nüìä CARGA DE TRABALHO DOS PROFISSIONAIS:");
  console.table(
    professionals.map((p) => ({
      ID: p.id,
      Nome: p.name,
      Especialidades: p.specialties.join(", "),
      "Carga Atual": p.current_workload,
      Status: p.active ? "Ativo" : "Inativo",
    }))
  );
}

// EXECUTAR DIAGN√ìSTICO COMPLETO
console.log("\nüöÄ INICIANDO DIAGN√ìSTICO COMPLETO");
console.log("=".repeat(70));

// Passo 1: Detectar inconsist√™ncias
const inconsistencies = detectInconsistencies();

// Passo 2: Corrigir inconsist√™ncias
fixInconsistencies(inconsistencies);

// Passo 3: Verificar resultado
const remainingInconsistencies = serviceRequests.filter(
  (service) => service.status === "Agendado" && !service.professional_id
);

if (remainingInconsistencies.length === 0) {
  console.log("\n‚úÖ TODAS AS INCONSIST√äNCIAS FORAM CORRIGIDAS!");
} else {
  console.log(
    `\n‚ö†Ô∏è  AINDA RESTAM ${remainingInconsistencies.length} INCONSIST√äNCIAS`
  );
}

// Passo 4: Relat√≥rio final
generateFinalReport();

console.log("\nüéØ RECOMENDA√á√ïES:");
console.log("1. Executar migration 25_fix_scheduled_without_professional.sql");
console.log("2. Implementar trigger de preven√ß√£o");
console.log(
  "3. Verificar se as fun√ß√µes auto_assign_professional est√£o sendo usadas"
);
console.log("4. Revisar fluxo no frontend para garantir atribui√ß√£o autom√°tica");

console.log("\n" + "=".repeat(70));
console.log("üîß DIAGN√ìSTICO CONCLU√çDO");
